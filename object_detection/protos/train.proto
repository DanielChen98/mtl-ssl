syntax = "proto2";

package object_detection.protos;

import "object_detection/protos/optimizer.proto";
import "object_detection/protos/preprocessor.proto";

// Message for configuring DetectionModel training jobs (train.py).
message TrainConfig {
  // Input queue batch size.
  optional uint32 batch_size = 1 [default=32];

  // Data augmentation options.
  repeated PreprocessingStep data_augmentation_options = 2;

  // Whether to synchronize replicas during training.
  optional bool sync_replicas = 3 [default=false];

  // How frequently to keep checkpoints.
  optional uint32 keep_checkpoint_every_n_hours = 4 [default=1000];

  // Optimizer used to train the DetectionModel.
  optional Optimizer optimizer = 5;

  // If greater than 0, clips gradients by this value.
  optional float gradient_clipping_by_norm = 6 [default=0.0];

  // Checkpoint to restore variables from. Typically used to load feature
  // extractor variables trained outside of object detection.
  optional string fine_tune_checkpoint = 7 [default=""];

  // Specifies if the finetune checkpoint is from an object detection model.
  // If from an object detection model, the model being trained should have
  // the same parameters with the exception of the num_classes parameter.
  // If false, it assumes the checkpoint was a object classification model.
  optional bool from_detection_checkpoint = 8 [default=false];

  // Number of steps to train the DetectionModel for. If 0, will train the model
  // indefinitely.
  optional uint32 num_steps = 9 [default=0];

  // Number of training steps between replica startup.
  // This flag must be set to 0 if sync_replicas is set to true.
  optional float startup_delay_steps = 10 [default=15];

  // If greater than 0, multiplies the gradient of bias variables by this
  // amount.
  optional float bias_grad_multiplier = 11 [default=0];

  // Variables that should not be updated during training.
  repeated string freeze_variables = 12;

  // Number of replicas to aggregate before making parameter updates.
  optional int32 replicas_to_aggregate = 13 [default=1];

  // Maximum number of elements to store within a queue.
  optional int32 batch_queue_capacity = 14 [default=600];

  // Number of threads to use for batching.
  optional int32 num_batch_queue_threads = 15 [default=8];

  // Maximum capacity of the queue used to prefetch assembled batches.
  optional int32 prefetch_queue_capacity = 16 [default=10];

  // Steps between each log
  optional uint32 log_every_n_steps = 17 [default=1];

  // Training ignore options
  optional TrainingIgnoreOptions ignore_options = 18;

  // How often to save checkpoint.
  optional uint32 save_interval_secs = 19 [default=600];

  // Whether to restore box predictor weights from checkpoint.
  optional bool restore_box_predictor = 20 [default=false];

  // Whether to divide gradients by batch size.
  optional bool divide_grad_by_batch = 21 [default=false];

  // If greater than 0, multiplies the gradient of variables by this amount.
  optional float grad_multiplier = 22 [default=0];

  // Whether to show image summary.
  optional bool show_image_summary = 23 [default=false];

  optional uint32 save_summaries_secs = 24 [default=120];

  // Whether to restore mtl refiner weights from checkpoint.
  optional bool restore_mtl_refine = 25 [default=false];

  // Whether to restore mtl weights from checkpoint.
  optional bool restore_window = 26 [default=false];
  optional bool restore_closeness = 27 [default=false];
  optional bool restore_edgemask = 28 [default=false];
}

message TrainingIgnoreOptions {
  // Use or not
  optional bool use_ignore = 1 [default=false];

  // Minimum height
  optional int32 min_height = 2 [default=0];

  // Minimum width
  optional int32 min_width = 3 [default=0];

  // Label type
  repeated string label_type_to_ignore = 4;
}
